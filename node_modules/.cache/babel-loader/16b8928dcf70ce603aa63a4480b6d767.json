{"ast":null,"code":"var _jsxFileName = \"/Users/filippkovalenko/Desktop/\\u0443\\u0447\\u0435\\u0431\\u0430 /react-1/AppRouter/src/containers/PostDetail/PostDetail.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useCallback } from 'react';\nimport styled from 'styled-components';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Link, useParams } from 'react-router-dom';\nimport { getUser } from '../../api/users';\nimport * as Statuses from \"../../store/statuses\";\nimport { getPost, getSlice, getComments } from \"../../store/posts\"; //import { getPost, getPostComments } from '../../api/posts';\n\nimport useRequest from '../../hooks/useRequest';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst PostDetailWrapper = styled('section')`\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  width: 100%;\n  max-width: 800px;\n  margin: 8px auto;\n  padding: 4px;\n  box-sizing: border-box;\n`;\n_c = PostDetailWrapper;\n\nconst PostDetail = () => {\n  _s();\n\n  const dispatch = useDispatch();\n  const {\n    post,\n    postRequestStatus,\n    comments,\n    commentsRequestStatus\n  } = useSelector(getSlice);\n  const params = useParams();\n  useEffect(() => {\n    if (params.id) {\n      dispatch(getPost(params.id));\n      dispatch(getComments(params.id));\n    }\n  }, [dispatch]);\n  const isLoading = postRequestStatus === Statuses.PENDING || commentsRequestStatus === Statuses.PENDING;\n  const isError = postRequestStatus === Statuses.FAILURE || commentsRequestStatus === Statuses.FAILURE;\n  const requestUsersID = useCallback(() => {\n    if (!(post === null || post === void 0 ? void 0 : post.userId)) return Promise.resolve();\n    return getUser(post === null || post === void 0 ? void 0 : post.userId);\n  }, [post === null || post === void 0 ? void 0 : post.userId]);\n  const {\n    data: user\n  } = useRequest(requestUsersID);\n  return /*#__PURE__*/_jsxDEV(PostDetailWrapper, {\n    children: [/*#__PURE__*/_jsxDEV(Link, {\n      to: \"/posts\",\n      children: \"Posts\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), isLoading && \"loading...\", isError && \"some error...\", post && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: post.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: post.body\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true), /*#__PURE__*/_jsxDEV(Link, {\n      to: `/users/${post === null || post === void 0 ? void 0 : post.userId}`,\n      children: user === null || user === void 0 ? void 0 : user.username\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), !isLoading && !isError && comments.map(todo => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: todo.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: todo.email\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: todo.body\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 13\n      }, this)\n    }, todo.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 11\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n}; // const PostDetail = () => {\n//   const params = useParams();\n//   const requestPost = useCallback(() => getPost(params.id), [params.id]);\n//   const requestComments = useCallback(() => getPostComments(params.id), [params.id]);\n//   const { data: post, loading, error } = useRequest(requestPost);\n//   const { data: comments } = useRequest(requestComments);\n//   const requestUsersID = useCallback(() => {\n//     if (!post?.userId) return Promise.resolve();\n//     return getUser(post?.userId);\n//   }, [post?.userId]);\n//   const { data: user } = useRequest(requestUsersID);\n//   return (\n//     <PostDetailWrapper>\n//       <Link to=\"/posts\">Posts</Link>\n//       {loading && 'loading...'}\n//       {error && 'some error...'}\n//       {post && (\n//         <>\n//           <h1>{post.title}</h1>\n//           <p>{post.body}</p>\n//         </>\n//       )}\n//       <Link to={`/users/${post?.userId}`}>{user?.username}</Link>\n//       {comments &&\n//         comments.map(todo => (\n//           <div key={todo.id}>\n//             <ul>\n//               <li>{todo.name}</li>\n//               <li>{todo.email}</li>\n//               <li>{todo.body}</li>\n//             </ul>\n//           </div>\n//         ))}\n//     </PostDetailWrapper>\n//   );\n// };\n\n\n_s(PostDetail, \"mBiectTSoGsfB1xkDfp+JDRY+Ac=\", false, function () {\n  return [useDispatch, useSelector, useParams, useRequest];\n});\n\n_c2 = PostDetail;\nexport default PostDetail;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"PostDetailWrapper\");\n$RefreshReg$(_c2, \"PostDetail\");","map":{"version":3,"sources":["/Users/filippkovalenko/Desktop/учеба /react-1/AppRouter/src/containers/PostDetail/PostDetail.js"],"names":["React","useEffect","useCallback","styled","useDispatch","useSelector","Link","useParams","getUser","Statuses","getPost","getSlice","getComments","useRequest","PostDetailWrapper","PostDetail","dispatch","post","postRequestStatus","comments","commentsRequestStatus","params","id","isLoading","PENDING","isError","FAILURE","requestUsersID","userId","Promise","resolve","data","user","title","body","username","map","todo","name","email"],"mappings":"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","sourcesContent":["import React, { useEffect,useCallback } from 'react';\n\nimport styled from 'styled-components';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Link, useParams } from 'react-router-dom';\nimport { getUser } from '../../api/users';\nimport * as Statuses from \"../../store/statuses\";\nimport { getPost, getSlice,getComments } from \"../../store/posts\";\n//import { getPost, getPostComments } from '../../api/posts';\nimport useRequest from '../../hooks/useRequest';\n\nconst PostDetailWrapper = styled('section')`\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  width: 100%;\n  max-width: 800px;\n  margin: 8px auto;\n  padding: 4px;\n  box-sizing: border-box;\n`;\n\nconst PostDetail = () => {\n  const dispatch = useDispatch();\n  const { post, postRequestStatus, comments,commentsRequestStatus } = useSelector(getSlice);\n  const params = useParams();\n\n  useEffect(() => {\n    if(params.id){\n      dispatch(getPost(params.id))\n      dispatch(getComments(params.id))\n    }\n  }, [dispatch]);\n\n  const isLoading =  postRequestStatus === Statuses.PENDING ||commentsRequestStatus === Statuses.PENDING;\n  const isError = postRequestStatus === Statuses.FAILURE || commentsRequestStatus === Statuses.FAILURE;\n\n  const requestUsersID = useCallback(() => {\n    if (!post?.userId) return Promise.resolve();\n    return getUser(post?.userId);\n  }, [post?.userId]);\n  const { data: user } = useRequest(requestUsersID);\n\n  return (\n    <PostDetailWrapper>\n      <Link to=\"/posts\">Posts</Link>\n      {isLoading &&  \"loading...\"}\n      {isError && \"some error...\"}\n      {post && (\n        <>\n          <h1>{post.title}</h1>\n          <p>{post.body}</p>\n        </>\n      )}\n      <Link to={`/users/${post?.userId}`}>{user?.username}</Link>\n      {!isLoading && !isError &&\n        comments.map(todo => (\n          <div key={todo.id}>\n            <ul>\n              <li>{todo.name}</li>\n              <li>{todo.email}</li>\n              <li>{todo.body}</li>\n            </ul>\n          </div>\n        ))}\n    </PostDetailWrapper>\n  );\n};\n\n// const PostDetail = () => {\n//   const params = useParams();\n//   const requestPost = useCallback(() => getPost(params.id), [params.id]);\n//   const requestComments = useCallback(() => getPostComments(params.id), [params.id]);\n//   const { data: post, loading, error } = useRequest(requestPost);\n//   const { data: comments } = useRequest(requestComments);\n//   const requestUsersID = useCallback(() => {\n//     if (!post?.userId) return Promise.resolve();\n//     return getUser(post?.userId);\n//   }, [post?.userId]);\n//   const { data: user } = useRequest(requestUsersID);\n\n//   return (\n//     <PostDetailWrapper>\n//       <Link to=\"/posts\">Posts</Link>\n//       {loading && 'loading...'}\n//       {error && 'some error...'}\n//       {post && (\n//         <>\n//           <h1>{post.title}</h1>\n//           <p>{post.body}</p>\n//         </>\n//       )}\n//       <Link to={`/users/${post?.userId}`}>{user?.username}</Link>\n//       {comments &&\n//         comments.map(todo => (\n//           <div key={todo.id}>\n//             <ul>\n//               <li>{todo.name}</li>\n//               <li>{todo.email}</li>\n//               <li>{todo.body}</li>\n//             </ul>\n//           </div>\n//         ))}\n//     </PostDetailWrapper>\n//   );\n// };\n\nexport default PostDetail;\n"]},"metadata":{},"sourceType":"module"}