{"ast":null,"code":"var _jsxFileName = \"/Users/filippkovalenko/Desktop/\\u0443\\u0447\\u0435\\u0431\\u0430 /react-1/AppRouter/src/containers/PostDetail/PostDetail.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport styled from 'styled-components';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Link, useParams } from 'react-router-dom'; //import { getUser } from '../../api/users';\n\nimport { getUser, getSliceUsers } from '../../store/users';\nimport * as Statuses from '../../store/statuses';\nimport { getPost, getSlice, getComments } from '../../store/posts'; //import { getPost, getPostComments } from '../../api/posts';\n//import useRequest from '../../hooks/useRequest';\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst PostDetailWrapper = styled('section')`\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  width: 100%;\n  max-width: 800px;\n  margin: 8px auto;\n  padding: 4px;\n  box-sizing: border-box;\n`;\n_c = PostDetailWrapper;\nconst CommentsWrapper = styled('ol')`\n  margin: 0px 0px 0px 16px;\n  padding: 0px;\n\n  > li {\n    border-bottom: 1px solid gray;\n    padding: 4px;\n\n    > h5 {\n      margin: 0px 0px 8px;\n    }\n\n    > span {\n      font-size: 12px;\n    }\n\n    > p {\n      margin: 4px 0px 0px;\n    }\n  }\n  > a {\n      color: ${props => props.theme.color.main};\n    }\n`;\n_c2 = CommentsWrapper;\n\nconst PostDetail = () => {\n  _s();\n\n  const dispatch = useDispatch();\n  const {\n    post,\n    postRequestStatus,\n    comments,\n    commentsRequestStatus\n  } = useSelector(getSlice);\n  const {\n    user\n  } = useSelector(getSliceUsers);\n  const params = useParams();\n  useEffect(() => {\n    if (params.id) {\n      dispatch(getPost(params.id));\n      dispatch(getComments(params.id));\n    }\n\n    if (!(post === null || post === void 0 ? void 0 : post.userId)) return Promise.resolve();\n    {\n      dispatch(getUser(post === null || post === void 0 ? void 0 : post.userId));\n    }\n  }, [dispatch, params.id, post === null || post === void 0 ? void 0 : post.userId]);\n  const isLoading = postRequestStatus === Statuses.PENDING || commentsRequestStatus === Statuses.PENDING;\n  const isError = postRequestStatus === Statuses.FAILURE || commentsRequestStatus === Statuses.FAILURE;\n  return /*#__PURE__*/_jsxDEV(PostDetailWrapper, {\n    children: [/*#__PURE__*/_jsxDEV(Link, {\n      to: \"/posts\",\n      children: \"Posts\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), isLoading && 'loading...', isError && 'some error...', post && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: post.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: post.body\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true), /*#__PURE__*/_jsxDEV(Link, {\n      to: `/users/${post === null || post === void 0 ? void 0 : post.userId}`,\n      children: user === null || user === void 0 ? void 0 : user.username\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CommentsWrapper, {\n      children: !isLoading && !isError && comments.map(comment => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n          children: comment.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: comment.email\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: comment.body\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 15\n        }, this)]\n      }, comment.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n}; // const PostDetail = () => {\n//   const params = useParams();\n//   const requestPost = useCallback(() => getPost(params.id), [params.id]);\n//   const requestComments = useCallback(() => getPostComments(params.id), [params.id]);\n//   const { data: post, loading, error } = useRequest(requestPost);\n//   const { data: comments } = useRequest(requestComments);\n//   const requestUsersID = useCallback(() => {\n//   if (!post?.userId) return Promise.resolve();\n//     return getUser(post?.userId);\n//   }, [post?.userId]);\n//   const { data: user } = useRequest(requestUsersID);\n//   return (\n//     <PostDetailWrapper>\n//       <Link to=\"/posts\">Posts</Link>\n//       {loading && 'loading...'}\n//       {error && 'some error...'}\n//       {post && (\n//         <>\n//           <h1>{post.title}</h1>\n//           <p>{post.body}</p>\n//         </>\n//       )}\n//       <Link to={`/users/${post?.userId}`}>{user?.username}</Link>\n//       {comments &&\n//         comments.map(todo => (\n//           <div key={todo.id}>\n//             <ul>\n//               <li>{todo.name}</li>\n//               <li>{todo.email}</li>\n//               <li>{todo.body}</li>\n//             </ul>\n//           </div>\n//         ))}\n//     </PostDetailWrapper>\n//   );\n// };\n\n\n_s(PostDetail, \"GFVWw5tk4uOB9AVxuP6zugqIdnw=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useParams];\n});\n\n_c3 = PostDetail;\nexport default PostDetail;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"PostDetailWrapper\");\n$RefreshReg$(_c2, \"CommentsWrapper\");\n$RefreshReg$(_c3, \"PostDetail\");","map":{"version":3,"sources":["/Users/filippkovalenko/Desktop/учеба /react-1/AppRouter/src/containers/PostDetail/PostDetail.js"],"names":["React","useEffect","styled","useDispatch","useSelector","Link","useParams","getUser","getSliceUsers","Statuses","getPost","getSlice","getComments","PostDetailWrapper","CommentsWrapper","props","theme","color","main","PostDetail","dispatch","post","postRequestStatus","comments","commentsRequestStatus","user","params","id","userId","Promise","resolve","isLoading","PENDING","isError","FAILURE","title","body","username","map","comment","name","email"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\n\nimport styled from 'styled-components';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Link, useParams } from 'react-router-dom';\n//import { getUser } from '../../api/users';\nimport { getUser, getSliceUsers } from '../../store/users';\nimport * as Statuses from '../../store/statuses';\nimport { getPost, getSlice, getComments } from '../../store/posts';\n//import { getPost, getPostComments } from '../../api/posts';\n//import useRequest from '../../hooks/useRequest';\n\nconst PostDetailWrapper = styled('section')`\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  width: 100%;\n  max-width: 800px;\n  margin: 8px auto;\n  padding: 4px;\n  box-sizing: border-box;\n`;\n\nconst CommentsWrapper = styled('ol')`\n  margin: 0px 0px 0px 16px;\n  padding: 0px;\n\n  > li {\n    border-bottom: 1px solid gray;\n    padding: 4px;\n\n    > h5 {\n      margin: 0px 0px 8px;\n    }\n\n    > span {\n      font-size: 12px;\n    }\n\n    > p {\n      margin: 4px 0px 0px;\n    }\n  }\n  > a {\n      color: ${(props) => props.theme.color.main};\n    }\n`;\n\nconst PostDetail = () => {\n  const dispatch = useDispatch();\n  const { post, postRequestStatus, comments, commentsRequestStatus } = useSelector(getSlice);\n  const { user } = useSelector(getSliceUsers);\n  const params = useParams();\n\n  useEffect(() => {\n    if (params.id) {\n      dispatch(getPost(params.id));\n      dispatch(getComments(params.id));\n    }\n    if (!post?.userId) return Promise.resolve();\n    {\n      dispatch(getUser(post?.userId));\n    }\n  }, [dispatch, params.id, post?.userId]);\n\n  const isLoading = postRequestStatus === Statuses.PENDING || commentsRequestStatus === Statuses.PENDING;\n  const isError = postRequestStatus === Statuses.FAILURE || commentsRequestStatus === Statuses.FAILURE;\n\n  return (\n    <PostDetailWrapper>\n      <Link to=\"/posts\">Posts</Link>\n      {isLoading && 'loading...'}\n      {isError && 'some error...'}\n      {post && (\n        <>\n          <h1>{post.title}</h1>\n          <p>{post.body}</p>\n        </>\n      )}\n      <Link to={`/users/${post?.userId}`}>{user?.username}</Link>\n      <CommentsWrapper>\n        {!isLoading &&\n          !isError &&\n          comments.map(comment => (\n            <li key={comment.id}>\n              <h5>{comment.name}</h5>\n              <span>{comment.email}</span>\n              <p>{comment.body}</p>\n            </li>\n          ))}\n      </CommentsWrapper>\n    </PostDetailWrapper>\n  );\n};\n\n// const PostDetail = () => {\n//   const params = useParams();\n//   const requestPost = useCallback(() => getPost(params.id), [params.id]);\n//   const requestComments = useCallback(() => getPostComments(params.id), [params.id]);\n//   const { data: post, loading, error } = useRequest(requestPost);\n//   const { data: comments } = useRequest(requestComments);\n//   const requestUsersID = useCallback(() => {\n//   if (!post?.userId) return Promise.resolve();\n//     return getUser(post?.userId);\n//   }, [post?.userId]);\n//   const { data: user } = useRequest(requestUsersID);\n\n//   return (\n//     <PostDetailWrapper>\n//       <Link to=\"/posts\">Posts</Link>\n//       {loading && 'loading...'}\n//       {error && 'some error...'}\n//       {post && (\n//         <>\n//           <h1>{post.title}</h1>\n//           <p>{post.body}</p>\n//         </>\n//       )}\n//       <Link to={`/users/${post?.userId}`}>{user?.username}</Link>\n//       {comments &&\n//         comments.map(todo => (\n//           <div key={todo.id}>\n//             <ul>\n//               <li>{todo.name}</li>\n//               <li>{todo.email}</li>\n//               <li>{todo.body}</li>\n//             </ul>\n//           </div>\n//         ))}\n//     </PostDetailWrapper>\n//   );\n// };\n\nexport default PostDetail;\n"]},"metadata":{},"sourceType":"module"}